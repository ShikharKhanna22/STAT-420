y_hat=X %*% beta_hat_no_lm
e = y - y_hat
(SE_model = as.vector(sqrt(t(e) %*% e / (n - p))))
#all.equal(SE_model, summary(ozone_model)[["sigma"]])
n = nrow(Ozone)
p = length(beta_hat_no_lm)
y_hat=X %*% beta_hat_no_lm
e = y - y_hat
(SE_model = as.vector(sqrt(t(e) %*% e / (n - p))))
all.equal(SE_model, summary(ozone_model)[["sigma"]])
SST = sum((y-mean(y))^2)
SSR = sum((y_hat-mean(y))^2)
(r_squared = SSR/SST)
SST = sum((y-mean(y))^2)
SSR = sum((y_hat-mean(y))^2)
(r_squared = SSR/SST)
all.equal(r_squared, summary(ozone_model)[["r.squared"]])
install.packages("ISLR")
# load required package, remove "name" variable
library(ISLR)
Auto = subset(Auto, select = -c(name))
set.seed(1)
auto_trn_idx = sample(1:nrow(Auto), 292)
auto_trn= Auto[auto_trn_idx, ]
auto_tst= Auto[-auto_trn_idx, ]
rmse_train <- function(resid){
sqrt(sum(resid^2)/ length(resid))
}
rmse_test <- function(train_model){
resid = auto_tst$mpg - predict(train_model, newdata = auto_tst)
sqrt(sum(resid^2)/ length(resid))
}
m1 = lm(mpg~., data=auto_trn)
m2 = lm(mpg~displacement, data=auto_trn)
m3 = lm(mpg~displacement+weight+year+origin, data=auto_trn)
m4 = lm(mpg~horsepower+weight+acceleration+origin, data=auto_trn)
m5 = lm(mpg~weight+acceleration+year+origin+horsepower, data=auto_trn)
results = data.frame(
Model = c("Model-1", "Model-2", "Model-3", "Model-4", "Model-5"),
TRAIN_RMSE = c(rmse_train(m1$residuals), rmse_train(m2$residuals), rmse_train(m3$residuals), rmse_train(m4$residuals), rmse_train(m5$residuals)),
TEST_RMSE = c(rmse_test(m1),rmse_test(m2),rmse_test(m3),rmse_test(m4),rmse_test(m5))
)
knitr::kable(results)
library(knitr)
library(kable)
rmse_train <- function(resid){
sqrt(sum(resid^2)/ length(resid))
}
rmse_test <- function(train_model){
resid = auto_tst$mpg - predict(train_model, newdata = auto_tst)
sqrt(sum(resid^2)/ length(resid))
}
m1 = lm(mpg~., data=auto_trn)
m2 = lm(mpg~displacement, data=auto_trn)
m3 = lm(mpg~displacement+weight+year+origin, data=auto_trn)
m4 = lm(mpg~horsepower+weight+acceleration+origin, data=auto_trn)
m5 = lm(mpg~weight+acceleration+year+origin+horsepower, data=auto_trn)
results = data.frame(
Model = c("Model-1", "Model-2", "Model-3", "Model-4", "Model-5"),
TRAIN_RMSE = c(rmse_train(m1$residuals), rmse_train(m2$residuals), rmse_train(m3$residuals), rmse_train(m4$residuals), rmse_train(m5$residuals)),
TEST_RMSE = c(rmse_test(m1),rmse_test(m2),rmse_test(m3),rmse_test(m4),rmse_test(m5))
)
results
calculate_rmse <- function(resid){
#resid= model$residuals
rmse= sqrt(sum(resid^2)/ length(resid))
return (rmse)
}
model1_full= lm(mpg~., data=auto_trn)
model2_disp= lm(mpg~displacement, data=auto_trn)
model3_disp_wg_year_origin=lm(mpg~displacement+weight+year+origin, data=auto_trn)
model4_hor_wg_acc_or=lm(mpg~horsepower+weight+acceleration+origin, data=auto_trn)
model5_hor_wg_acc_yr_or= lm(mpg~weight+acceleration+year+origin+horsepower, data=auto_trn)
mat <- matrix(, nrow = 5, ncol = 2)
colnames(mat) = c("Train RMSE", "Test RMSE")
rownames(mat)=c("Model1-all variables", "Model2-displacement", "Model3-displacement+weight+year+origin",
"Model4-horsepower+weight+acceleration+origin",
"Model5-horsepower+weight+acceleration+year+origin")
mat[1, c(1,2)] <- c(calculate_rmse(model1_full$residuals), calculate_rmse(auto_tst$mpg- predict(model1_full, newdata = auto_tst)))
mat[2, c(1,2)] <- c(calculate_rmse(model2_disp$residuals), calculate_rmse(auto_tst$mpg- predict(model2_disp, newdata = auto_tst)))
mat[3, c(1,2)] <- c(calculate_rmse(model3_disp_wg_year_origin$residuals), calculate_rmse(auto_tst$mpg- predict(model3_disp_wg_year_origin, newdata = auto_tst)))
mat[4, c(1,2)] <- c(calculate_rmse(model4_hor_wg_acc_or$residuals), calculate_rmse(auto_tst$mpg- predict(model4_hor_wg_acc_or, newdata = auto_tst)))
mat[5, c(1,2)] <- c(calculate_rmse(model5_hor_wg_acc_yr_or$residuals), calculate_rmse(auto_tst$mpg- predict(model5_hor_wg_acc_yr_or, newdata = auto_tst)))
calculate_rmse <- function(resid){
#resid= model$residuals
rmse= sqrt(sum(resid^2)/ length(resid))
return (rmse)
}
model1_full= lm(mpg~., data=auto_trn)
model2_disp= lm(mpg~displacement, data=auto_trn)
model3_disp_wg_year_origin=lm(mpg~displacement+weight+year+origin, data=auto_trn)
model4_hor_wg_acc_or=lm(mpg~horsepower+weight+acceleration+origin, data=auto_trn)
model5_hor_wg_acc_yr_or= lm(mpg~weight+acceleration+year+origin+horsepower, data=auto_trn)
mat <- matrix(, nrow = 5, ncol = 2)
colnames(mat) = c("Train RMSE", "Test RMSE")
rownames(mat)=c("Model1-all variables", "Model2-displacement", "Model3-displacement+weight+year+origin",
"Model4-horsepower+weight+acceleration+origin",
"Model5-horsepower+weight+acceleration+year+origin")
mat[1, c(1,2)] <- c(calculate_rmse(model1_full$residuals), calculate_rmse(auto_tst$mpg- predict(model1_full, newdata = auto_tst)))
mat[2, c(1,2)] <- c(calculate_rmse(model2_disp$residuals), calculate_rmse(auto_tst$mpg- predict(model2_disp, newdata = auto_tst)))
mat[3, c(1,2)] <- c(calculate_rmse(model3_disp_wg_year_origin$residuals), calculate_rmse(auto_tst$mpg- predict(model3_disp_wg_year_origin, newdata = auto_tst)))
mat[4, c(1,2)] <- c(calculate_rmse(model4_hor_wg_acc_or$residuals), calculate_rmse(auto_tst$mpg- predict(model4_hor_wg_acc_or, newdata = auto_tst)))
mat[5, c(1,2)] <- c(calculate_rmse(model5_hor_wg_acc_yr_or$residuals), calculate_rmse(auto_tst$mpg- predict(model5_hor_wg_acc_yr_or, newdata = auto_tst)))
mat
# load required package, remove "name" variable
library(ISLR)
Auto = subset(Auto, select = -c(name))
set.seed(1)
auto_trn_idx = sample(1:nrow(Auto), 292)
auto_trn= Auto[auto_trn_idx, ]
auto_tst= Auto[-auto_trn_idx, ]
set.seed(1)
auto_trn_idx = sample(1:nrow(Auto), 292)
auto_trn= Auto[auto_trn_idx, ]
auto_tst= Auto[-auto_trn_idx, ]
# load required package, remove "name" variable
library(ISLR)
Auto = subset(Auto, select = -c(name))
set.seed(1)
auto_trn_idx = sample(1:nrow(Auto), 292)
auto_trn= Auto[auto_trn_idx, ]
auto_tst= Auto[-auto_trn_idx, ]
rmse_train <- function(resid){
sqrt(sum(resid^2)/ length(resid))
}
rmse_test <- function(train_model){
resid = auto_tst$mpg - predict(train_model, newdata = auto_tst)
sqrt(sum(resid^2)/ length(resid))
}
m1 = lm(mpg~., data=auto_trn)
m2 = lm(mpg~displacement, data=auto_trn)
m3 = lm(mpg~displacement+weight+year+origin, data=auto_trn)
m4 = lm(mpg~horsepower+weight+acceleration+origin, data=auto_trn)
m5 = lm(mpg~weight+acceleration+year+origin+horsepower, data=auto_trn)
results = data.frame(
Model = c("Model-1", "Model-2", "Model-3", "Model-4", "Model-5"),
TRAIN_RMSE = c(rmse_train(m1$residuals), rmse_train(m2$residuals), rmse_train(m3$residuals), rmse_train(m4$residuals), rmse_train(m5$residuals)),
TEST_RMSE = c(rmse_test(m1),rmse_test(m2),rmse_test(m3),rmse_test(m4),rmse_test(m5))
)
results
rmse_train <- function(resid){
sqrt(sum(resid^2)/ length(resid))
}
rmse_test <- function(train_model){
resid = auto_tst$mpg - predict(train_model, newdata = auto_tst)
sqrt(sum(resid^2)/ length(resid))
}
m1 = lm(mpg~., data=auto_trn)
m2 = lm(mpg~displacement, data=auto_trn)
m3 = lm(mpg~displacement+weight+year+origin, data=auto_trn)
m4 = lm(mpg~horsepower+weight+acceleration+origin, data=auto_trn)
m5 = lm(mpg~weight+acceleration+year+origin+horsepower, data=auto_trn)
results = data.frame(
Model = c("Model-1", "Model-2", "Model-3", "Model-4", "Model-5"),
TRAIN_RMSE = c(rmse_train(m1$residuals), rmse_train(m2$residuals), rmse_train(m3$residuals), rmse_train(m4$residuals), rmse_train(m5$residuals)),
TEST_RMSE = c(rmse_test(m1),rmse_test(m2),rmse_test(m3),rmse_test(m4),rmse_test(m5))
)
knitr::kable(results)
install.packages(knitr)
install.packages("knitr")
rmse_train <- function(resid){
sqrt(sum(resid^2)/ length(resid))
}
rmse_test <- function(train_model){
resid = auto_tst$mpg - predict(train_model, newdata = auto_tst)
sqrt(sum(resid^2)/ length(resid))
}
m1 = lm(mpg~., data=auto_trn)
m2 = lm(mpg~displacement, data=auto_trn)
m3 = lm(mpg~displacement+weight+year+origin, data=auto_trn)
m4 = lm(mpg~horsepower+weight+acceleration+origin, data=auto_trn)
m5 = lm(mpg~weight+acceleration+year+origin+horsepower, data=auto_trn)
results = data.frame(
Model = c("Model-1", "Model-2", "Model-3", "Model-4", "Model-5"),
TRAIN_RMSE = c(rmse_train(m1$residuals), rmse_train(m2$residuals), rmse_train(m3$residuals), rmse_train(m4$residuals), rmse_train(m5$residuals)),
TEST_RMSE = c(rmse_test(m1),rmse_test(m2),rmse_test(m3),rmse_test(m4),rmse_test(m5))
)
knitr::kable(results)
install.packages("rmarkdown")
rmse_train <- function(resid){
sqrt(sum(resid^2)/ length(resid))
}
rmse_test <- function(train_model){
resid = auto_tst$mpg - predict(train_model, newdata = auto_tst)
sqrt(sum(resid^2)/ length(resid))
}
m1 = lm(mpg~., data=auto_trn)
m2 = lm(mpg~displacement, data=auto_trn)
m3 = lm(mpg~displacement+weight+year+origin, data=auto_trn)
m4 = lm(mpg~horsepower+weight+acceleration+origin, data=auto_trn)
m5 = lm(mpg~weight+acceleration+year+origin+horsepower, data=auto_trn)
results = data.frame(
Model = c("Model-1", "Model-2", "Model-3", "Model-4", "Model-5"),
TRAIN_RMSE = c(rmse_train(m1$residuals), rmse_train(m2$residuals), rmse_train(m3$residuals), rmse_train(m4$residuals), rmse_train(m5$residuals)),
TEST_RMSE = c(rmse_test(m1),rmse_test(m2),rmse_test(m3),rmse_test(m4),rmse_test(m5))
)
knitr::kable(results)
set.seed(420)
sample_size = 42
x0=rep(1, sample_size)
x1=rnorm(sample_size, mean = 0, sd=2)
x2=runif(sample_size, min = 0, max = 4)
x3=rnorm(sample_size, mean = 0, sd=1)
x4=runif(sample_size, min = -2, max = 2)
x5=rnorm(sample_size, mean = 0, sd=2)
X=cbind(x0,x1,x2,x3,x4,x5)
C=solve(t(X) %*% X)
y=rep(0, sample_size)
sim_data=cbind(x1,x2,x3,x4,x5,y)
set.seed(420)
sample_size = 42
x0=rep(1, sample_size)
x1=rnorm(sample_size, mean = 0, sd=2)
x2=runif(sample_size, min = 0, max = 4)
x3=rnorm(sample_size, mean = 0, sd=1)
x4=runif(sample_size, min = -2, max = 2)
x5=rnorm(sample_size, mean = 0, sd=2)
X=cbind(x0,x1,x2,x3,x4,x5)
C=solve(t(X) %*% X)
y=rep(0, sample_size)
sim_data=cbind(x1,x2,x3,x4,x5,y)
sum(diag(C))
sim_data[5,]
sum(diag(C))
sim_data[5,]
beta_hat_1 = rep(0, 2500)
beta_3_pval = rep(0, 2500)
beta_5_pval = rep(0, 2500)
beta_0 = 2
beta_1 =-0.75
beta_2 = 1.5
beta_3 = 0
beta_4 = 0
beta_5 = 2
sigma = 5
e = rnorm(sample_size, mean = 0, sd = sigma)
y = beta_0 + beta_1 * sim_data[,1] + beta_2 * sim_data[,2]+ beta_3 * sim_data[,3]+ beta_4 * sim_data[,4]+ beta_5 * sim_data[,5] + e
View(sim_data)
beta_0 = 2
beta_1 =-0.75
beta_2 = 1.5
beta_3 = 0
beta_4 = 0
beta_5 = 2
sigma = 5
e = rnorm(sample_size, mean = 0, sd = sigma)
sim_data$y = beta_0 + beta_1 * sim_data[,1] + beta_2 * sim_data[,2]+ beta_3 * sim_data[,3]+ beta_4 * sim_data[,4]+ beta_5 * sim_data[,5] + e
set.seed(420)
sample_size = 42
x0=rep(1, sample_size)
x1=rnorm(sample_size, mean = 0, sd=2)
x2=runif(sample_size, min = 0, max = 4)
x3=rnorm(sample_size, mean = 0, sd=1)
x4=runif(sample_size, min = -2, max = 2)
x5=rnorm(sample_size, mean = 0, sd=2)
X=cbind(x0,x1,x2,x3,x4,x5)
C=solve(t(X) %*% X)
y=rep(0, sample_size)
sim_data=cbind(x1,x2,x3,x4,x5,y)
sum(diag(C))
sim_data[5,]
beta_hat_1 = rep(0, 2500)
beta_3_pval = rep(0, 2500)
beta_5_pval = rep(0, 2500)
beta_0 = 2
beta_1 =-0.75
beta_2 = 1.5
beta_3 = 0
beta_4 = 0
beta_5 = 2
sigma = 5
e = rnorm(sample_size, mean = 0, sd = sigma)
sim_data[y] = beta_0 + beta_1 * sim_data[,1] + beta_2 * sim_data[,2]+ beta_3 * sim_data[,3]+ beta_4 * sim_data[,4]+ beta_5 * sim_data[,5] + e
View(sim_data)
set.seed(420)
sample_size = 42
x0=rep(1, sample_size)
x1=rnorm(sample_size, mean = 0, sd=2)
x2=runif(sample_size, min = 0, max = 4)
x3=rnorm(sample_size, mean = 0, sd=1)
x4=runif(sample_size, min = -2, max = 2)
x5=rnorm(sample_size, mean = 0, sd=2)
X=cbind(x0,x1,x2,x3,x4,x5)
C=solve(t(X) %*% X)
y=rep(0, sample_size)
sim_data=cbind(x1,x2,x3,x4,x5,y)
sim_data[y]
sim_data[,y]
beta_0 = 2
beta_1 =-0.75
beta_2 = 1.5
beta_3 = 0
beta_4 = 0
beta_5 = 2
sigma = 5
e = rnorm(sample_size, mean = 0, sd = sigma)
sim_data[,y] = beta_0 + beta_1 * sim_data[,1] + beta_2 * sim_data[,2]+ beta_3 * sim_data[,3]+ beta_4 * sim_data[,4]+ beta_5 * sim_data[,5] + e
View(sim_data)
beta_0 = 2
beta_1 =-0.75
beta_2 = 1.5
beta_3 = 0
beta_4 = 0
beta_5 = 2
sigma = 5
e = rnorm(sample_size, mean = 0, sd = sigma)
y = beta_0 + beta_1 * sim_data[,1] + beta_2 * sim_data[,2]+ beta_3 * sim_data[,3]+ beta_4 * sim_data[,4]+ beta_5 * sim_data[,5] + e
y
class(sim_data)
set.seed(420)
sample_size = 42
x0=rep(1, sample_size)
x1=rnorm(sample_size, mean = 0, sd=2)
x2=runif(sample_size, min = 0, max = 4)
x3=rnorm(sample_size, mean = 0, sd=1)
x4=runif(sample_size, min = -2, max = 2)
x5=rnorm(sample_size, mean = 0, sd=2)
X=cbind(x0,x1,x2,x3,x4,x5)
C=solve(t(X) %*% X)
y=rep(0, sample_size)
sim_data=cbind(x1,x2,x3,x4,x5,y)
beta_hat_1 = rep(0, 2500)
beta_3_pval = rep(0, 2500)
beta_5_pval = rep(0, 2500)
beta_0 = 2
beta_1 =-0.75
beta_2 = 1.5
beta_3 = 0
beta_4 = 0
beta_5 = 2
sigma = 5
e = rnorm(sample_size, mean = 0, sd = sigma)
y_sim = beta_0 + beta_1 * sim_data[,1] + beta_2 * sim_data[,2]+ beta_3 * sim_data[,3]+ beta_4 * sim_data[,4]+ beta_5 * sim_data[,5] + e
cbind(sim_data, y = y_sim)
beta_0 = 2
beta_1 =-0.75
beta_2 = 1.5
beta_3 = 0
beta_4 = 0
beta_5 = 2
sigma = 5
e = rnorm(sample_size, mean = 0, sd = sigma)
y_sim = beta_0 + beta_1 * sim_data[,1] + beta_2 * sim_data[,2]+ beta_3 * sim_data[,3]+ beta_4 * sim_data[,4]+ beta_5 * sim_data[,5] + e
data.frame(sim_data, response=y_sim)
sim_data
sim_data[-y]
sim_data[-6]
sim_data[,-6]
beta_0 = 2
beta_1 =-0.75
beta_2 = 1.5
beta_3 = 0
beta_4 = 0
beta_5 = 2
sigma = 5
e = rnorm(sample_size, mean = 0, sd = sigma)
y_sim = beta_0 + beta_1 * sim_data[,1] + beta_2 * sim_data[,2]+ beta_3 * sim_data[,3]+ beta_4 * sim_data[,4]+ beta_5 * sim_data[,5] + e
data.frame(sim_data[,-6], response=y_sim)
set.seed(420)
sample_size = 42
x0=rep(1, sample_size)
x1=rnorm(sample_size, mean = 0, sd=2)
x2=runif(sample_size, min = 0, max = 4)
x3=rnorm(sample_size, mean = 0, sd=1)
x4=runif(sample_size, min = -2, max = 2)
x5=rnorm(sample_size, mean = 0, sd=2)
X=cbind(x0,x1,x2,x3,x4,x5)
C=solve(t(X) %*% X)
y=rep(0, sample_size)
sim_data=cbind(x1,x2,x3,x4,x5,y)
beta_hat_1 = rep(0, 2500)
beta_3_pval = rep(0, 2500)
beta_5_pval = rep(0, 2500)
beta_0 = 2
beta_1 =-0.75
beta_2 = 1.5
beta_3 = 0
beta_4 = 0
beta_5 = 2
sigma = 5
e = rnorm(sample_size, mean = 0, sd = sigma)
y_sim = beta_0 + beta_1 * sim_data[,1] + beta_2 * sim_data[,2]+ beta_3 * sim_data[,3]+ beta_4 * sim_data[,4]+ beta_5 * sim_data[,5] + e
df = data.frame(sim_data[,-6], response=y_sim)
sim_fit = lm(response ~ . , data = df)
beta_0 = 2
beta_1 =-0.75
beta_2 = 1.5
beta_3 = 0
beta_4 = 0
beta_5 = 2
sigma = 5
for (i in 1:2500){
e = rnorm(sample_size, mean = 0, sd = sigma)
y_sim = beta_0 + beta_1 * sim_data[,1] + beta_2 * sim_data[,2]+ beta_3 * sim_data[,3]+   beta_4 * sim_data[,4]+ beta_5 * sim_data[,5] + e
df = data.frame(sim_data[,-6], response=y_sim)
sim_fit = lm(response ~ . , data = df)
beta_hat_1[i]=coef(sim_fit)[[2]]
beta_3_pval[i]=summary(sim_fit)$coefficients[4,4]
beta_5_pval[i]=summary(sim_fit)$coefficients[6,4]
}
vr_beta_1=25*(C[2,2])
sd_beta_1=sqrt(vr_beta_1)
vr_beta_1
sigma / sqrt(sum((x1 - mean(x1))^2))
sigma / sqrt(sum((x1 - mean(x1))^2))
25*(C[2,2])
(sd_beta_1=sqrt(25*(C[2,2])))
(sd_beta_hat_1 = sqrt(25*(C[2,2])))
(true_beta_hat_1 = beta_1)
(true_beta_hat_1 = beta_1)
(sd_beta_hat_1 = sqrt(25*(C[2,2])))
(mean_beta_hat_1 = mean(beta_hat_1))
(sd_beta_hat_1 = sd(beta_hat_1))
(mean_beta_hat_1 = mean(beta_hat_1))
(sd_beta_hat_1 = sd(beta_hat_1))
set.seed(420)
sample_size = 42
x0=rep(1, sample_size)
x1=rnorm(sample_size, mean = 0, sd=2)
x2=runif(sample_size, min = 0, max = 4)
x3=rnorm(sample_size, mean = 0, sd=1)
x4=runif(sample_size, min = -2, max = 2)
x5=rnorm(sample_size, mean = 0, sd=2)
X=cbind(x0,x1,x2,x3,x4,x5)
C=solve(t(X) %*% X)
y=rep(0, sample_size)
sim_data=cbind(x1,x2,x3,x4,x5,y)
sum(diag(C))
sim_data[5,]
beta_hat_1 = rep(0, 2500)
beta_3_pval = rep(0, 2500)
beta_5_pval = rep(0, 2500)
beta_0 = 2
beta_1 =-0.75
beta_2 = 1.5
beta_3 = 0
beta_4 = 0
beta_5 = 2
sigma = 5
for (i in 1:2500){
e = rnorm(sample_size, mean = 0, sd = sigma)
y_sim = beta_0 + beta_1 * sim_data[,1] + beta_2 * sim_data[,2]+ beta_3 * sim_data[,3]+   beta_4 * sim_data[,4]+ beta_5 * sim_data[,5] + e
df = data.frame(sim_data[,-6], response=y_sim)
sim_fit = lm(response ~ . , data = df)
beta_hat_1[i]=coef(sim_fit)[[2]]
beta_3_pval[i]=summary(sim_fit)$coefficients[4,4]
beta_5_pval[i]=summary(sim_fit)$coefficients[6,4]
}
(true_beta_hat_1 = beta_1)
(sd_true_beta_hat_1 = sqrt(25*(C[2,2])))
(mean_beta_hat_1 = mean(beta_hat_1))
(sd_sim_beta_hat_1 = sd(beta_hat_1))
hist(beta_hat_1, prob = TRUE, breaks = 20,
xlab = expression(hat(beta)[1]), main = "Distribution of simulated beta hat 1", border = "black", col="grey")
curve(dnorm(x, mean = -0.75, sd = 0.434983),
col = "orange", add = TRUE, lwd = 3)
hist(beta_hat_1, prob = TRUE, breaks = 30,
xlab = expression(hat(beta)[1]), main = "Distribution of simulated beta hat 1", border = "black", col="grey")
curve(dnorm(x, mean = -0.75, sd = 0.434983),
col = "orange", add = TRUE, lwd = 3)
mean(beta_3_pval<0.10)
mean(beta_3_pval<0.10)
p(0.10)
mean(beta_3_pval<0.10)
pnorm(0.10)
mean(beta_3_pval<0.10)
pnorm(0.10,0,0.434983)
mean(beta_3_pval<0.10)
pnorm(0.10,-0.75,0.434983)
mean(beta_3_pval<0.10)
pnorm(0.10 , 0 , sqrt(25*(C[4,4]))
mean(beta_3_pval<0.10)
pnorm(0.10 , 0 , sqrt(25*(C[4,4])))
mean(beta_3_pval<0.10)
mean(beta_3_pval<0.10)
2	* pt(0, df= 40, lower.tail = FALSE)
mean(beta_3_pval<0.10)
2	* pt(0.10, df= 40, lower.tail = FALSE)
mean(beta_3_pval<0.10)
t_stat = (0 - 0.10)/5
2	* pt(t_stat, df= 40, lower.tail = FALSE)
mean(beta_3_pval<0.10)
t_stat = abs(0 - 0.10)/5
2	* pt(t_stat, df= 40, lower.tail = FALSE)
mean(beta_3_pval<0.10)
summary(sim_fit)
mean(beta_5_pval<0.01)
# load required package, remove "name" variable
library(ISLR)
Auto = subset(Auto, select = -c(name))
set.seed(1)
auto_trn_idx = sample(1:nrow(Auto), 292)
auto_trn= Auto[auto_trn_idx, ]
auto_tst= Auto[-auto_trn_idx, ]
rmse_train <- function(resid){
sqrt(sum(resid^2)/ length(resid))
}
rmse_test <- function(train_model){
resid = auto_tst$mpg - predict(train_model, newdata = auto_tst)
sqrt(sum(resid^2)/ length(resid))
}
m1 = lm(mpg~., data=auto_trn)
m2 = lm(mpg~displacement, data=auto_trn)
m3 = lm(mpg~weight+year+origin, data=auto_trn)
m4 = lm(mpg~horsepower+weight+acceleration, data=auto_trn)
m5 = lm(mpg~weight+year+horsepower, data=auto_trn)
results = data.frame(
Model = c("Model-1", "Model-2", "Model-3", "Model-4", "Model-5"),
TRAIN_RMSE = c(rmse_train(m1$residuals), rmse_train(m2$residuals), rmse_train(m3$residuals), rmse_train(m4$residuals), rmse_train(m5$residuals)),
TEST_RMSE = c(rmse_test(m1),rmse_test(m2),rmse_test(m3),rmse_test(m4),rmse_test(m5))
)
knitr::kable(results)
