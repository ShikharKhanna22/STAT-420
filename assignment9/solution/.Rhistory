data_3= data[,c(-6, -8)]
bike_mod_all_3=lm(cnt~., data=data_3)
summary(bike_mod_all_3)[["adj.r.squared"]]
sum(cooks.distance(bike_mod_all_3) > 4 / length(cooks.distance(bike_mod_all_3)))
cokks_distance = cooks.distance(bike_mod_all_3)
bike_mod_all_4 = lm(cnt ~.,
data = data_3,
subset = cokks_distance <= 4 / length(cokks_distance))
summary(bike_mod_all_4)[["adj.r.squared"]]
par(mfrow = c(2, 2))
plot(bike_mod_all_4,col = 'dodgerblue')
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("Rmarkdown")
yes
y
install.packages("rmarkdown")
install.packages("rmarkdown")
Credit = subset(Credit,Balance>0)
mod_a = lm(Balance ~ . , data =Credit)
mod_a = step(mod_a, direction = "backward", trace=0)
plot(fitted(mod_a), resid(mod_a), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residual")
abline(h = 0, col = "orange", lwd = 2)
qqnorm(resid(mod_a), main = "Q-Q Plot", col = "dodgerblue")
qqline(resid(mod_a), col = "dodgerblue", lwd = 2)
Credit = subset(Credit,Balance>0)
mod_b = lm(Balance ~ . ^2 , data =Credit)
mod_b = step(mod_a, direction = "backward", trace=0)
plot(fitted(mod_b), resid(mod_b), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residual")
abline(h = 0, col = "orange", lwd = 2)
qqnorm(resid(mod_b), main = "Q-Q Plot", col = "dodgerblue")
qqline(resid(mod_b), col = "dodgerblue", lwd = 2)
get_loocv_rmse(mod_b)
Credit = subset(Credit,Balance>0)
mod_b = lm(Balance ~ . ^2 , data = Credit)
mod_b = step(mod_b, direction = "backward", trace=0)
plot(fitted(mod_b), resid(mod_b), col = "dodgerblue", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residual")
abline(h = 0, col = "orange", lwd = 2)
qqnorm(resid(mod_b), main = "Q-Q Plot", col = "dodgerblue")
qqline(resid(mod_b), col = "dodgerblue", lwd = 2)
get_loocv_rmse(mod_b)
library(lmtest)
get_bp_decision = function(model, alpha) {
decide = unname(bptest(model)$p.value < alpha)
ifelse(decide, "Reject", "Fail to Reject")
}
get_sw_decision = function(model, alpha) {
decide = unname(shapiro.test(resid(model))$p.value < alpha)
ifelse(decide, "Reject", "Fail to Reject")
}
get_num_params = function(model) {
length(coef(model))
}
get_loocv_rmse = function(model) {
sqrt(mean((resid(model) / (1 - hatvalues(model))) ^ 2))
}
get_adj_r2 = function(model) {
summary(model)$adj.r.squared
}
get_loocv_rmse(mod_b)
get_adj_r2(mod_b)
get_sw_decision(mod_b, alpha = 0.01)
get_num_params(mod_b)
install.packages("caret")
library(caret)
library(ggplot2)
data(Sacramento)
sac_data = Sacramento
sac_data$limits = factor(ifelse(sac_data$city == "SACRAMENTO", "in", "out"))
sac_data = subset(sac_data, select = -c(city, zip))
?Sacramento
qplot(y = longitude, x = latitude, data = sac_data,
col = limits, main = "Sacramento City Limits ")
set.seed(420)
sac_trn_idx  = sample(nrow(sac_data), size = trunc(0.80 * nrow(sac_data)))
sac_trn_data = sac_data[sac_trn_idx, ]
sac_tst_data = sac_data[-sac_trn_idx, ]
get_loocv_rmse = function(model) {
sqrt(mean((resid(model) / (1 - hatvalues(model))) ^ 2))
}
mod=lm(price~ ., data= sac_trn_data)
mod_final = step(mod, direction = "backward", trace=0)
get_loocv_rmse(mod_final)
mod=lm(price~ ., data= sac_trn_data)
mod_final = step(mod, direction = "backward", trace=0)
get_loocv_rmse(mod_final)
get_loocv_rmse = function(model) {
sqrt(mean((resid(model) / (1 - hatvalues(model))) ^ 2))
}
mod_start = lm(price~ ., data= sac_trn_data)
mod_back_aic = step(mod_start, direction = "backward", trace=0)
get_loocv_rmse(mod_back_aic)
pred_test = predict(mod_back_aic, newdata = sac_tst_data)
error = abs(pred_test - sac_tst_data$price)
avg_pct_err = sum(error/predicted) * 100 / length(predicted)
pred_test = predict(mod_back_aic, newdata = sac_tst_data)
error = abs(pred_test - sac_tst_data$price)
avg_pct_err = sum(error/pred_test) * 100 / length(pred_test)
pred_test = predict(mod_back_aic, newdata = sac_tst_data)
error = abs(pred_test - sac_tst_data$price)
avg_pct_err = sum(error/pred_test) * 100 / length(pred_test)
plot(sac_tst_data$price, pred_test, col="dodgerblue",
ylab="Predicted value",
xlab="Actual value",
main="Actual vs predicted",
pch=20,
cex=1)
abline(coef=c(0,1), col="orange", lwd=3)
pred_test = predict(mod_back_aic, newdata = sac_tst_data)
error = abs(pred_test - sac_tst_data$price)
avg_pct_err = sum(error/pred_test) * 100 / length(pred_test)
plot(sac_tst_data$price, pred_test, col="blue",
ylab="Predicted value", xlab="Actual value",
main="Actual vs predicted", pch=20, cex=1)
abline(coef=c(0,1), col="orange", lwd=3)
pred_test = predict(mod_back_aic, newdata = sac_tst_data)
error = abs(pred_test - sac_tst_data$price)
avg_pct_err = sum(error/pred_test) * 100 / length(pred_test)
plot(sac_tst_data$price, pred_test, col="blue",
ylab="Predicted value", xlab="Actual value",
main="Actual vs predicted", pch=20, cex=1)
abline(coef=c(0,1), col="grey", lwd=3)
pred_test = predict(mod_back_aic, newdata = sac_tst_data)
error = abs(pred_test - sac_tst_data$price)
avg_pct_err = sum(error/pred_test) * 100 / length(pred_test)
plot(sac_tst_data$price, pred_test, col="grey",
ylab="Predicted value", xlab="Actual value",
main="Actual vs predicted", pch=20, cex=1)
abline(coef=c(0,1), col="orange", lwd=3)
pred_test = predict(mod_back_aic, newdata = sac_tst_data)
error = abs(pred_test - sac_tst_data$price)
avg_pct_err = sum(error/pred_test) * 100 / length(pred_test)
plot(sac_tst_data$price, pred_test, col="grey",
ylab="Predicted value", xlab="Actual value",
main="Actual vs Predicted values", pch=20, cex=1)
abline(coef=c(0,1), col="orange", lwd=3)
get_loocv_rmse = function(model) {
sqrt(mean((resid(model) / (1 - hatvalues(model))) ^ 2))
}
mod_start = lm(price~ . ^2, data= sac_trn_data)
mod_back_aic = step(mod_start, direction = "backward", trace=0)
get_loocv_rmse(mod_back_aic)
pred_test = predict(mod_back_aic, newdata = sac_tst_data)
error = abs(pred_test - sac_tst_data$price)
avg_pct_err = sum(error/pred_test) * 100 / length(pred_test)
plot(sac_tst_data$price, pred_test, col="grey",
ylab="Predicted value", xlab="Actual value",
main="Actual vs Predicted values", pch=20, cex=1)
abline(coef=c(0,1), col="orange", lwd=3)
beta_0  = 1
beta_1  = -1
beta_2  = 2
beta_3  = -2
beta_4  = 1
beta_5  = 1
beta_6  = 0
beta_7  = 0
beta_8  = 0
beta_9  = 0
beta_10 = 0
sigma = 2
not_sig  = c("x_6", "x_7", "x_8", "x_9", "x_10")
signif = c("x_1", "x_2", "x_3", "x_4", "x_5")
set.seed(420)
n = 100
x_1  = runif(n, 0, 10)
x_2  = runif(n, 0, 10)
x_3  = runif(n, 0, 10)
x_4  = runif(n, 0, 10)
x_5  = runif(n, 0, 10)
x_6  = runif(n, 0, 10)
x_7  = runif(n, 0, 10)
x_8  = runif(n, 0, 10)
x_9  = runif(n, 0, 10)
x_10 = runif(n, 0, 10)
sim_data_1 = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10,
y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 + beta_4 * x_4 +
beta_5 * x_5 + rnorm(n, 0 , sigma)
)
sim_data_1 = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10,
y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 + beta_4 * x_4 +
beta_5 * x_5 + rnorm(n, 0 , sigma)
)
head(sim_data_1)
fit = lm(y ~ x_1 + x_2 + x_6 + x_7, data = sim_data_1)
coef(fit)
# which are false negatives?
!(signif %in% names(coef(fit)))
# which are false positives?
names(coef(fit)) %in% not_sig
beta_0  = 1
beta_1  = -1
beta_2  = 2
beta_3  = -2
beta_4  = 1
beta_5  = 1
beta_6  = 0
beta_7  = 0
beta_8  = 0
beta_9  = 0
beta_10 = 0
sigma = 2
not_sig  = c("x_6", "x_7", "x_8", "x_9", "x_10")
signif = c("x_1", "x_2", "x_3", "x_4", "x_5")
set.seed(420)
n = 100
x_1  = runif(n, 0, 10)
x_2  = runif(n, 0, 10)
x_3  = runif(n, 0, 10)
x_4  = runif(n, 0, 10)
x_5  = runif(n, 0, 10)
x_6  = runif(n, 0, 10)
x_7  = runif(n, 0, 10)
x_8  = runif(n, 0, 10)
x_9  = runif(n, 0, 10)
x_10 = runif(n, 0, 10)
sim_data_1 = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10,
y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 + beta_4 * x_4 +
beta_5 * x_5 + rnorm(n, 0 , sigma)
)
head(sim_data_1)
fit = lm(y ~ x_1 + x_2 + x_6 + x_7, data = sim_data_1)
coef(fit)
# which are false negatives?
!(signif %in% names(coef(fit)))
# which are false positives?
names(coef(fit)) %in% not_sig
set.seed(19930501)
fn_aic=rep(0,300)
fn_bic=rep(0,300)
fp_aic=rep(0,300)
fp_bic=rep(0,300)
k=log(nrow(x1))
set.seed(19930501)
fn_aic=rep(0,300)
fn_bic=rep(0,300)
fp_aic=rep(0,300)
fp_bic=rep(0,300)
k=log(nrow(x_1))
set.seed(19930501)
fn_aic=rep(0,300)
fn_bic=rep(0,300)
fp_aic=rep(0,300)
fp_bic=rep(0,300)
k=log(nrow(x_1))
x_1
set.seed(19930501)
aic_fn=rep(0,300)
aic_fp=rep(0,300)
bic_fn=rep(0,300)
bic_fp=rep(0,300)
k=log(count(x_1))
set.seed(19930501)
aic_fn=rep(0,300)
aic_fp=rep(0,300)
bic_fn=rep(0,300)
bic_fp=rep(0,300)
k=log(length(x_1))
for (i in (1:300)){
y = beta_0 + beta_1*x_1 + beta_2*x_2 + beta_3*x_3 + beta_4*x_4 + beta_5*x_5 + rnorm(n,0,sigma)
sim_data = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, y)
fit_start = lm(y ~ ., data = sim_data)
mod_back_aic=step(fit_start, direction = "backward", trace=0)
aic_fn[i]=sum(!(signif %in% names(coef(mod_back_aic)))) # false negatives?
aic_fp[i]=sum(names(coef(mod_back_aic)) %in% not_sig)   # false positives?
mod_back_bic=step(fit, direction = "backward", trace=0, k)
bic_fn[i]=sum(!(signif %in% names(coef(mod_back_bic)))) # false negatives?
bic_fp[i]=sum(names(coef(mod_back_bic)) %in% not_sig)   # false positives?
}
set.seed(19930501)
aic_fn=rep(0,300)
aic_fp=rep(0,300)
bic_fn=rep(0,300)
bic_fp=rep(0,300)
k=log(length(x_1))
for (i in (1:300)){
y = beta_0 + beta_1*x_1 + beta_2*x_2 + beta_3*x_3 + beta_4*x_4 + beta_5*x_5 + rnorm(n,0,sigma)
sim_data = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, y)
fit_start = lm(y ~ ., data = sim_data)
mod_back_aic=step(fit_start, direction = "backward", trace=0)
aic_fn[i]=sum(!(signif %in% names(coef(mod_back_aic)))) # false negatives?
aic_fp[i]=sum(names(coef(mod_back_aic)) %in% not_sig)   # false positives?
mod_back_bic=step(fit, direction = "backward", trace=0, k=log(nrow(sim_data_1)))
bic_fn[i]=sum(!(signif %in% names(coef(mod_back_bic)))) # false negatives?
bic_fp[i]=sum(names(coef(mod_back_bic)) %in% not_sig)   # false positives?
}
set.seed(19930501)
aic_fn=rep(0,300)
aic_fp=rep(0,300)
bic_fn=rep(0,300)
bic_fp=rep(0,300)
for (i in (1:300)){
y = beta_0 + beta_1*x_1 + beta_2*x_2 + beta_3*x_3 + beta_4*x_4 + beta_5*x_5 + rnorm(n,0,sigma)
sim_data = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, y)
fit_start = lm(y ~ ., data = sim_data)
mod_back_aic=step(fit_start, direction = "backward", trace=0)
aic_fn[i]=sum(!(signif %in% names(coef(mod_back_aic)))) # false negatives?
aic_fp[i]=sum(names(coef(mod_back_aic)) %in% not_sig)   # false positives?
mod_back_bic=step(fit, direction = "backward", trace=0, k=log(nrow(sim_data)))
bic_fn[i]=sum(!(signif %in% names(coef(mod_back_bic)))) # false negatives?
bic_fp[i]=sum(names(coef(mod_back_bic)) %in% not_sig)   # false positives?
}
result_matrix =matrix(0, nrow = 2, ncol = 2)
rownames(result_matrix)=c("AIC", "BIC")
colnames(result_matrix)=c("FN Rate","FP Rate")
result_matrix[1,]=c(mean(aic_fn), mean(aic_fp))
result_matrix[2,]=c(mean(bic_fn), mean(bic_fp))
knitr::kable(result_matrix)
beta_0  = 1
beta_1  = -1
beta_2  = 2
beta_3  = -2
beta_4  = 1
beta_5  = 1
beta_6  = 0
beta_7  = 0
beta_8  = 0
beta_9  = 0
beta_10 = 0
sigma = 2
not_sig  = c("x_6", "x_7", "x_8", "x_9", "x_10")
signif = c("x_1", "x_2", "x_3", "x_4", "x_5")
set.seed(420)
n = 100
x_1  = runif(n, 0, 10)
x_2  = runif(n, 0, 10)
x_3  = runif(n, 0, 10)
x_4  = runif(n, 0, 10)
x_5  = runif(n, 0, 10)
x_6  = runif(n, 0, 10)
x_7  = runif(n, 0, 10)
x_8  = runif(n, 0, 10)
x_9  = runif(n, 0, 10)
x_10 = runif(n, 0, 10)
sim_data_1 = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10,
y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 + beta_4 * x_4 +
beta_5 * x_5 + rnorm(n, 0 , sigma)
)
head(sim_data_1)
fit = lm(y ~ x_1 + x_2 + x_6 + x_7, data = sim_data_1)
coef(fit)
# which are false negatives?
!(signif %in% names(coef(fit)))
# which are false positives?
names(coef(fit)) %in% not_sig
set.seed(19930501)
aic_fn=rep(0,300)
aic_fp=rep(0,300)
bic_fn=rep(0,300)
bic_fp=rep(0,300)
for (i in (1:300)){
y = beta_0 + beta_1*x_1 + beta_2*x_2 + beta_3*x_3 + beta_4*x_4 + beta_5*x_5 + rnorm(n,0,sigma)
sim_data = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, y)
fit_start = lm(y ~ ., data = sim_data)
mod_back_aic=step(fit_start, direction = "backward", trace=0)
aic_fn[i]=sum(!(signif %in% names(coef(mod_back_aic)))) # false negatives?
aic_fp[i]=sum(names(coef(mod_back_aic)) %in% not_sig)   # false positives?
mod_back_bic=step(fit, direction = "backward", trace=0, k=log(nrow(sim_data)))
bic_fn[i]=sum(!(signif %in% names(coef(mod_back_bic)))) # false negatives?
bic_fp[i]=sum(names(coef(mod_back_bic)) %in% not_sig)   # false positives?
}
result_matrix =matrix(0, nrow = 2, ncol = 2)
rownames(result_matrix)=c("AIC", "BIC")
colnames(result_matrix)=c("FN Rate","FP Rate")
result_matrix[1,]=c(mean(aic_fn), mean(aic_fp))
result_matrix[2,]=c(mean(bic_fn), mean(bic_fp))
knitr::kable(result_matrix)
set.seed(19930501)
aic_fn=rep(0,300)
aic_fp=rep(0,300)
bic_fn=rep(0,300)
bic_fp=rep(0,300)
for (i in (1:300)){
y = beta_0 + beta_1*x_1 + beta_2*x_2 + beta_3*x_3 + beta_4*x_4 + beta_5*x_5 + rnorm(n,0,sigma)
sim_data = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, y)
fit_start = lm(y ~ ., data = sim_data)
mod_back_aic=step(fit_start, direction = "backward", trace=0)
aic_fn[i]=sum(!(signif %in% names(coef(mod_back_aic)))) # false negatives?
aic_fp[i]=sum(names(coef(mod_back_aic)) %in% not_sig)   # false positives?
mod_back_bic=step(fit_start, direction = "backward", trace=0, k=log(nrow(sim_data)))
bic_fn[i]=sum(!(signif %in% names(coef(mod_back_bic)))) # false negatives?
bic_fp[i]=sum(names(coef(mod_back_bic)) %in% not_sig)   # false positives?
}
result_matrix =matrix(0, nrow = 2, ncol = 2)
rownames(result_matrix)=c("AIC", "BIC")
colnames(result_matrix)=c("FN Rate","FP Rate")
result_matrix[1,]=c(mean(aic_fn), mean(aic_fp))
result_matrix[2,]=c(mean(bic_fn), mean(bic_fp))
knitr::kable(result_matrix)
set.seed(19820517)
aic_fn=rep(0,300)
aic_fp=rep(0,300)
bic_fn=rep(0,300)
bic_fp=rep(0,300)
for (i in (1:300)){
y = beta_0 + beta_1*x_1 + beta_2*x_2 + beta_3*x_3 + beta_4*x_4 + beta_5*x_5 + rnorm(n,0,sigma)
sim_data = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, y)
fit_start = lm(y ~ ., data = sim_data)
mod_back_aic=step(fit_start, direction = "backward", trace=0)
aic_fn[i]=sum(!(signif %in% names(coef(mod_back_aic)))) # false negatives?
aic_fp[i]=sum(names(coef(mod_back_aic)) %in% not_sig)   # false positives?
mod_back_bic=step(fit_start, direction = "backward", trace=0, k=log(nrow(sim_data)))
bic_fn[i]=sum(!(signif %in% names(coef(mod_back_bic)))) # false negatives?
bic_fp[i]=sum(names(coef(mod_back_bic)) %in% not_sig)   # false positives?
}
df = data.frame("FN Rate"=c(mean(aic_fn)), "FP Rate"=mean(aic_fp))
row.names(df) =  c("AIC", "BIC")
df = data.frame("FN Rate"= c(mean(aic_fn),mean(bic_fn)), "FP Rate"=mean(aic_fp),mean(bic_fp))
row.names(df) = c("AIC", "BIC")
df
df = data.frame("FN Rate"= c(mean(aic_fn),mean(bic_fn)), "FP Rate"=c(mean(aic_fp),mean(bic_fp)))
row.names(df) = c("AIC", "BIC")
df
df = data.frame("FN_Rate"= c(mean(aic_fn),mean(bic_fn)), "FP_Rate"=c(mean(aic_fp),mean(bic_fp)))
row.names(df) = c("AIC", "BIC")
df
set.seed(19930501)
aic_fn=rep(0,300)
aic_fp=rep(0,300)
bic_fn=rep(0,300)
bic_fp=rep(0,300)
for (i in (1:300)){
y = beta_0 + beta_1*x_1 + beta_2*x_2 + beta_3*x_3 + beta_4*x_4 + beta_5*x_5 + rnorm(n,0,sigma)
sim_data = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, y)
fit_start = lm(y ~ ., data = sim_data)
mod_back_aic=step(fit_start, direction = "backward", trace=0)
aic_fn[i]=sum(!(signif %in% names(coef(mod_back_aic)))) # false negatives?
aic_fp[i]=sum(names(coef(mod_back_aic)) %in% not_sig)   # false positives?
mod_back_bic=step(fit_start, direction = "backward", trace=0, k=log(nrow(sim_data)))
bic_fn[i]=sum(!(signif %in% names(coef(mod_back_bic)))) # false negatives?
bic_fp[i]=sum(names(coef(mod_back_bic)) %in% not_sig)   # false positives?
}
df = data.frame("FN_Rate"= c(mean(aic_fn),mean(bic_fn)), "FP_Rate"=c(mean(aic_fp),mean(bic_fp)))
row.names(df) = c("AIC", "BIC")
df
set.seed(19820517)
aic_fn=rep(0,300)
aic_fp=rep(0,300)
bic_fn=rep(0,300)
bic_fp=rep(0,300)
for (i in (1:300)){
y = beta_0 + beta_1*x_1 + beta_2*x_2 + beta_3*x_3 + beta_4*x_4 + beta_5*x_5 + rnorm(n,0,sigma)
sim_data = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, y)
fit_start = lm(y ~ ., data = sim_data)
mod_back_aic=step(fit_start, direction = "backward", trace=0)
aic_fn[i]=sum(!(signif %in% names(coef(mod_back_aic)))) # false negatives?
aic_fp[i]=sum(names(coef(mod_back_aic)) %in% not_sig)   # false positives?
mod_back_bic=step(fit_start, direction = "backward", trace=0, k=log(nrow(sim_data)))
bic_fn[i]=sum(!(signif %in% names(coef(mod_back_bic)))) # false negatives?
bic_fp[i]=sum(names(coef(mod_back_bic)) %in% not_sig)   # false positives?
}
df = data.frame("FN_Rate"= c(mean(aic_fn),mean(bic_fn)), "FP_Rate"=c(mean(aic_fp),mean(bic_fp)))
row.names(df) = c("AIC", "BIC")
df
set.seed(420)
x_1  = runif(n, 0, 10)
x_2  = runif(n, 0, 10)
x_3  = runif(n, 0, 10)
x_4  = runif(n, 0, 10)
x_5  = runif(n, 0, 10)
x_6  = runif(n, 0, 10)
x_7  = runif(n, 0, 10)
x_8  = x_1 + rnorm(n, 0, 0.1)
x_9  = x_1 + rnorm(n, 0, 0.1)
x_10 = x_2 + rnorm(n, 0, 0.1)
sim_data_2 = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10,
y = beta_0 + beta_1 * x_1 + beta_2 * x_2 + beta_3 * x_3 + beta_4 * x_4 +
beta_5 * x_5 + rnorm(n, 0 , sigma)
)
set.seed(19930501)
#set.seed(19820517)
aic_fn=rep(0,300)
aic_fp=rep(0,300)
bic_fn=rep(0,300)
bic_fp=rep(0,300)
for (i in (1:300)){
y = beta_0 + beta_1*x_1 + beta_2*x_2 + beta_3*x_3 + beta_4*x_4 + beta_5*x_5 + rnorm(n,0,sigma)
sim_data = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, y)
fit_start = lm(y ~ ., data = sim_data)
mod_back_aic=step(fit_start, direction = "backward", trace=0)
aic_fn[i]=sum(!(signif %in% names(coef(mod_back_aic)))) # false negatives?
aic_fp[i]=sum(names(coef(mod_back_aic)) %in% not_sig)   # false positives?
mod_back_bic=step(fit_start, direction = "backward", trace=0, k=log(nrow(sim_data)))
bic_fn[i]=sum(!(signif %in% names(coef(mod_back_bic)))) # false negatives?
bic_fp[i]=sum(names(coef(mod_back_bic)) %in% not_sig)   # false positives?
}
df = data.frame("FN_Rate"= c(mean(aic_fn),mean(bic_fn)), "FP_Rate"=c(mean(aic_fp),mean(bic_fp)))
row.names(df) = c("AIC", "BIC")
df
set.seed(19820517)
aic_fn=rep(0,300)
aic_fp=rep(0,300)
bic_fn=rep(0,300)
bic_fp=rep(0,300)
for (i in (1:300)){
y = beta_0 + beta_1*x_1 + beta_2*x_2 + beta_3*x_3 + beta_4*x_4 + beta_5*x_5 + rnorm(n,0,sigma)
sim_data = data.frame(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10, y)
fit_start = lm(y ~ ., data = sim_data)
mod_back_aic=step(fit_start, direction = "backward", trace=0)
aic_fn[i]=sum(!(signif %in% names(coef(mod_back_aic)))) # false negatives?
aic_fp[i]=sum(names(coef(mod_back_aic)) %in% not_sig)   # false positives?
mod_back_bic=step(fit_start, direction = "backward", trace=0, k=log(nrow(sim_data)))
bic_fn[i]=sum(!(signif %in% names(coef(mod_back_bic)))) # false negatives?
bic_fp[i]=sum(names(coef(mod_back_bic)) %in% not_sig)   # false positives?
}
df = data.frame("FN_Rate"= c(mean(aic_fn),mean(bic_fn)), "FP_Rate"=c(mean(aic_fp),mean(bic_fp)))
row.names(df) = c("AIC", "BIC")
df
