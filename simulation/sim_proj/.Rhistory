lower = estimate - crit * g
upper = estimate + crit * g
lower
model = cat_model
newdata = data.frame(Bwt = 4.0)
level=0.95
n = nrow(model$model)
Se = summary(model)$sigma
x = model$model[,1]
estimate = predict(model,newdata)
crit = qt((1-level)/2, df=n-2, lower.tail = FALSE)
Sxx = sum((x - mean(x))^2)
g = sqrt(1 + 1/n + (newdata-mean(x))^2/Sxx)
lower = estimate - crit * g
upper = estimate + crit * g
lower
upper
model = cat_model
newdata = data.frame(Bwt = 4.0)
level=0.95
n = nrow(model$model)
Se = summary(model)$sigma
x = model$model[,1]
estimate = predict(model,newdata$Bwt)
View(newdata)
newdata$Bwt
model = cat_model
newdata = data.frame(Bwt = 4.0)
level=0.95
n = nrow(model$model)
Se = summary(model)$sigma
x = model$model[,1]
estimate = predict(model,newdata$Bwt)
newdata$Bwt
model = cat_model
newdata = data.frame(Bwt = 4.0)
level=0.95
n = nrow(model$model)
Se = summary(model)$sigma
x = model$model[,1]
estimate = predict(model, 4)
model = cat_model
newdata = data.frame(Bwt = 4.0)
level=0.95
n = nrow(model$model)
Se = summary(model)$sigma
x = model$model[,1]
estimate = predict(model, newdata=newdata$Bwt)
model = cat_model
newdata = data.frame(Bwt = 4.0)
data
level=0.95
n = nrow(model$model)
Se = summary(model)$sigma
x = model$model[,1]
estimate = predict(model, newdata=data$Bwt)
model = cat_model
newdata = data.frame(Bwt = 4.0)
data
level=0.95
n = nrow(model$model)
Se = summary(model)$sigma
x = model$model[,1]
estimate = predict(model, newdata=data)
model = cat_model
newdata = data.frame(Bwt = 4.0)
data = newdata
level=0.95
n = nrow(model$model)
Se = summary(model)$sigma
x = model$model[,1]
estimate = predict(model, newdata=data)
crit = qt((1-level)/2, df=n-2, lower.tail = FALSE)
Sxx = sum((x - mean(x))^2)
g = sqrt(1 + 1/n + (data$Bwt -mean(x))^2/Sxx)
lower = estimate - crit * g
upper = estimate + crit * g
upper
calc_pred_int = function(model,newdata,level=0.95){}
data = newdata
n = nrow(model$model)
Se = summary(model)$sigma
x = model$model[,1]
estimate = predict(model, newdata=data)
crit = qt((1-level)/2, df=n-2, lower.tail = FALSE)
Sxx = sum((x - mean(x))^2)
g = sqrt(1 + 1/n + (data$Bwt -mean(x))^2/Sxx)
lower = estimate - crit * g
upper = estimate + crit * g
v = c(estimate, lower, upper)
names(v) = c("estimate", "lower", "upper")
return(v)
calc_pred_int = function(model,newdata,level=0.95){
data = newdata
n = nrow(model$model)
Se = summary(model)$sigma
x = model$model[,1]
estimate = predict(model, newdata=data)
crit = qt((1-level)/2, df=n-2, lower.tail = FALSE)
Sxx = sum((x - mean(x))^2)
g = sqrt(1 + 1/n + (data$Bwt -mean(x))^2/Sxx)
lower = estimate - crit * g
upper = estimate + crit * g
v = c(estimate, lower, upper)
names(v) = c("estimate", "lower", "upper")
return(v)
}
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
newcat_2 = data.frame(Bwt = 3.3)
calc_pred_int(cat_model, newcat_2, level = 0.99)
library(MASS)
data(cats)
cat_model = lm(Hwt ~ Bwt, data=cats)
summary(cat_model)$coefficients[2,c(3,4)]
confint(cat_model, parm="Bwt", level = 0.90)
confint(cat_model, parm = "(Intercept)" , level = 0.99)
predict(cat_model, newdata = data.frame(Bwt = c(2.1, 2.8)),
interval = c("confidence"), level = 0.99)
predict(cat_model, newdata = data.frame(Bwt = c(2.8, 4.2)),
interval = c("prediction"), level = 0.99)
X_grid = seq(min(cats$Bwt), max(cats$Bwt), by = 0.01)
Y_ci_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "confidence", level = 0.90)
Y_pi_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "prediction", level = 0.90)
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight (in Kg)",
ylab = "Heart Weight (in gm)",
main = "Heart Weight vs Body Weight of male and female cats ",
pch  = 20,
cex  = 2,
col  = "grey",
ylim = c(min(Y_pi_band), max(Y_pi_band)))
abline(cat_model, lwd = 5, col = "darkorange")
lines(X_grid, Y_ci_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 2)
lines(X_grid, Y_ci_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 2)
lines(X_grid, Y_pi_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 3)
lines(X_grid, Y_pi_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 3)
points(mean(cats$Hwt), mean(cats$Bwt), pch = "+", cex = 3)
X_grid = seq(min(cats$Bwt), max(cats$Bwt), by = 0.01)
Y_ci_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "confidence", level = 0.90)
Y_pi_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "prediction", level = 0.90)
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight (in Kg)",
ylab = "Heart Weight (in gm)",
main = "Heart Weight vs Body Weight of male and female cats ",
pch  = 20,
cex  = 2,
col  = "grey",
ylim = c(min(Y_pi_band), max(Y_pi_band)))
abline(cat_model, lwd = 5, col = "darkorange")
lines(X_grid, Y_ci_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 2)
lines(X_grid, Y_ci_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 2)
lines(X_grid, Y_pi_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 3)
lines(X_grid, Y_pi_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 3)
points(mean(cats$Hwt), mean(cats$Bwt), pch = "+", cex = 7)
points(mean(cats$Hwt), mean(cats$Bwt), pch = "+", cex = 7)
X_grid = seq(min(cats$Bwt), max(cats$Bwt), by = 0.01)
Y_ci_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "confidence", level = 0.90)
Y_pi_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "prediction", level = 0.90)
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight (in Kg)",
ylab = "Heart Weight (in gm)",
main = "Heart Weight vs Body Weight of male and female cats ",
pch  = 20,
cex  = 2,
col  = "grey",
ylim = c(min(Y_pi_band), max(Y_pi_band)))
abline(cat_model, lwd = 5, col = "darkorange")
#lines(X_grid, Y_ci_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 2)
#lines(X_grid, Y_ci_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 2)
#lines(X_grid, Y_pi_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 3)
#lines(X_grid, Y_pi_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 3)
points(mean(cats$Hwt), mean(cats$Bwt), pch = "+", cex = 7)
X_grid = seq(min(cats$Bwt), max(cats$Bwt), by = 0.01)
Y_ci_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "confidence", level = 0.90)
Y_pi_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "prediction", level = 0.90)
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight (in Kg)",
ylab = "Heart Weight (in gm)",
main = "Heart Weight vs Body Weight of male and female cats ",
pch  = 20,
cex  = 2,
col  = "grey",
ylim = c(min(Y_pi_band), max(Y_pi_band)))
abline(cat_model, lwd = 5, col = "darkorange")
#lines(X_grid, Y_ci_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 2)
#lines(X_grid, Y_ci_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 2)
#lines(X_grid, Y_pi_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 3)
#lines(X_grid, Y_pi_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 3)
#points(mean(cats$Hwt), mean(cats$Bwt), pch = "+", cex = 7)
X_grid = seq(min(cats$Bwt), max(cats$Bwt), by = 0.01)
Y_ci_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "confidence", level = 0.90)
Y_pi_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "prediction", level = 0.90)
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight (in Kg)",
ylab = "Heart Weight (in gm)",
main = "Heart Weight vs Body Weight of male and female cats ",
pch  = 20,
cex  = 2,
col  = "grey",
ylim = c(min(Y_pi_band), max(Y_pi_band)))
abline(cat_model, lwd = 5, col = "darkorange")
#lines(X_grid, Y_ci_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 2)
#lines(X_grid, Y_ci_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 2)
#lines(X_grid, Y_pi_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 3)
#lines(X_grid, Y_pi_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 3)
points(mean(cats$Hwt), mean(cats$Bwt), pch = "+", cex = 7)
X_grid = seq(min(cats$Bwt), max(cats$Bwt), by = 0.01)
Y_ci_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "confidence", level = 0.90)
Y_pi_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "prediction", level = 0.90)
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight (in Kg)",
ylab = "Heart Weight (in gm)",
main = "Heart Weight vs Body Weight of male and female cats ",
pch  = 20,
cex  = 2,
col  = "grey",
ylim = c(min(Y_pi_band), max(Y_pi_band)))
abline(cat_model, lwd = 5, col = "darkorange")
#lines(X_grid, Y_ci_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 2)
#lines(X_grid, Y_ci_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 2)
#lines(X_grid, Y_pi_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 3)
#lines(X_grid, Y_pi_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 3)
points(mean(cats$Hwt), mean(cats$Bwt), pch = "+", cex = 7, col = "black")
mean(cats$Hwt)
mean(cats$Bwt
)
X_grid = seq(min(cats$Bwt), max(cats$Bwt), by = 0.01)
Y_ci_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "confidence", level = 0.90)
Y_pi_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "prediction", level = 0.90)
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight (in Kg)",
ylab = "Heart Weight (in gm)",
main = "Heart Weight vs Body Weight of male and female cats ",
pch  = 20,
cex  = 1,
col  = "grey",
ylim = c(min(Y_pi_band), max(Y_pi_band)))
abline(cat_model, lwd = 5, col = "darkorange")
#lines(X_grid, Y_ci_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 2)
#lines(X_grid, Y_ci_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 2)
#lines(X_grid, Y_pi_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 3)
#lines(X_grid, Y_pi_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 3)
points(mean(cats$Hwt), mean(cats$Bwt), pch = "+", cex = 7, col = "black")
X_grid = seq(min(cats$Bwt), max(cats$Bwt), by = 0.01)
Y_ci_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "confidence", level = 0.90)
Y_pi_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "prediction", level = 0.90)
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight (in Kg)",
ylab = "Heart Weight (in gm)",
main = "Heart Weight vs Body Weight of male and female cats ",
pch  = 20,
cex  = 1,
col  = "grey",
ylim = c(min(Y_pi_band), max(Y_pi_band)))
abline(cat_model, lwd = 2, col = "darkorange")
#lines(X_grid, Y_ci_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 2)
#lines(X_grid, Y_ci_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 2)
#lines(X_grid, Y_pi_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 3)
#lines(X_grid, Y_pi_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 3)
points(mean(cats$Hwt), mean(cats$Bwt), pch = "+", cex = 7, col = "black")
X_grid = seq(min(cats$Bwt), max(cats$Bwt), by = 0.01)
Y_ci_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "confidence", level = 0.90)
Y_pi_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "prediction", level = 0.90)
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight (in Kg)",
ylab = "Heart Weight (in gm)",
main = "Heart Weight vs Body Weight of male and female cats ",
pch  = 20,
cex  = 1,
col  = "grey",
ylim = c(min(Y_pi_band), max(Y_pi_band)))
#abline(cat_model, lwd = 2, col = "darkorange")
#lines(X_grid, Y_ci_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 2)
#lines(X_grid, Y_ci_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 2)
#lines(X_grid, Y_pi_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 3)
#lines(X_grid, Y_pi_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 3)
points(mean(cats$Hwt), mean(cats$Bwt), pch = "+", cex = 7, col = "black")
X_grid = seq(min(cats$Bwt), max(cats$Bwt), by = 0.01)
Y_ci_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "confidence", level = 0.90)
Y_pi_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "prediction", level = 0.90)
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight (in Kg)",
ylab = "Heart Weight (in gm)",
main = "Heart Weight vs Body Weight of male and female cats ",
pch  = 20,
cex  = 1,
col  = "grey",
ylim = c(min(Y_pi_band), max(Y_pi_band)))
abline(cat_model, lwd = 2, col = "darkorange")
lines(X_grid, Y_ci_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 2)
lines(X_grid, Y_ci_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 2)
lines(X_grid, Y_pi_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 3)
lines(X_grid, Y_pi_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 3)
points(mean(cats$Hwt), mean(cats$Bwt), pch = "+", cex = 7, col = "black")
calc_pred_int = function(model,newdata,level=0.95){
data = newdata
n = nrow(model$model)
Se = summary(model)$sigma
x = model$model[,1]
estimate = predict(model, newdata=data)
crit = qt((1-level)/2, df=n-2, lower.tail = FALSE)
Sxx = sum((x - mean(x))^2)
g = sqrt(1 + 1/n + (data$Bwt -mean(x))^2/Sxx)
lower = estimate - crit * g
upper = estimate + crit * g
v = c(estimate, lower, upper)
names(v) = c("estimate", "lower", "upper")
return(v)
}
cat_model$model[,1]
cat_model$model
calc_pred_int = function(model,newdata,level=0.95){
data = newdata
n = nrow(model$model)
Se = summary(model)$sigma
x = model$model[,2]
estimate = predict(model, newdata=data)
crit = qt((1-level)/2, df=n-2, lower.tail = FALSE)
Sxx = sum((x - mean(x))^2)
g = sqrt(1 + 1/n + (data$Bwt -mean(x))^2/Sxx)
lower = estimate - crit * g
upper = estimate + crit * g
v = c(estimate, lower, upper)
names(v) = c("estimate", "lower", "upper")
return(v)
}
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
newcat_2 = data.frame(Bwt = 3.3)
calc_pred_int(cat_model, newcat_2, level = 0.99)
hist(beta_0_hats, prob = TRUE, breaks = 20,
xlab = expression(hat(beta)[0]), main = "", border = "dodgerblue")
library(MASS)
data(cats)
cat_model = lm(Hwt ~ Bwt, data=cats)
summary(cat_model)$coefficients[2,c(3,4)]
confint(cat_model, parm="Bwt", level = 0.90)
confint(cat_model, parm = "(Intercept)" , level = 0.99)
predict(cat_model, newdata = data.frame(Bwt = c(2.1, 2.8)),
interval = c("confidence"), level = 0.99)
predict(cat_model, newdata = data.frame(Bwt = c(2.8, 4.2)),
interval = c("prediction"), level = 0.99)
X_grid = seq(min(cats$Bwt), max(cats$Bwt), by = 0.01)
Y_ci_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "confidence", level = 0.90)
Y_pi_band = predict(cat_model,
newdata = data.frame(Bwt = X_grid),
interval = "prediction", level = 0.90)
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight (in Kg)",
ylab = "Heart Weight (in gm)",
main = "Heart Weight vs Body Weight of male and female cats ",
pch  = 20,
cex  = 1,
col  = "grey",
ylim = c(min(Y_pi_band), max(Y_pi_band)))
abline(cat_model, lwd = 2, col = "darkorange")
lines(X_grid, Y_ci_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 2)
lines(X_grid, Y_ci_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 2)
lines(X_grid, Y_pi_band[,"lwr"], col = "dodgerblue", lwd = 3, lty = 3)
lines(X_grid, Y_pi_band[,"upr"], col = "dodgerblue", lwd = 3, lty = 3)
points(mean(cats$Hwt), mean(cats$Bwt), pch = "+", cex = 7, col = "black")
beta_1_hat = coef(cat_model)[2]
RSS = summary(cat_model)$sigma
Sxx = sum((cats$Bwt - mean(cats$Bwt))^2)
SE_beta_1_hat = RSS / sqrt(Sxx)
t_val = (beta_1_hat - 4) / SE_beta_1_hat
p_val = 2 * pt(abs(t_val), nrow(cats)-2, lower.tail = FALSE)
c(t_val, p_val)
data(Ozone, package = "mlbench")
Ozone = Ozone[, c(4, 6, 7, 8)]
colnames(Ozone) = c("ozone", "wind", "humidity", "temp")
Ozone = Ozone[complete.cases(Ozone), ]
ozone_wind_model = lm(ozone ~ wind, data=Ozone)
summary(ozone_wind_model)$coefficients[2,c(3,4)]
ozone_temp_model = lm(ozone ~ temp, data=Ozone)
summary(ozone_temp_model)$coefficients[2,c(3,4)]
birthday = 19820517
set.seed(birthday)
n = 50
x = seq(0, 10, length = n)
beta_0=-5
beta_1=3.25
sigma = 4
num_samples = 2000
beta_0_hats = rep(0, num_samples)
beta_1_hats = rep(0, num_samples)
for (i in 1:num_samples) {
eps = rnorm(n, mean = 0, sd = sigma)
y   = beta_0 + beta_1 * x + eps
sim_model = lm(y ~ x)
beta_0_hats[i] = coef(sim_model)[1]
beta_1_hats[i] = coef(sim_model)[2]
}
Sxx = sum( (x-mean(x))^2 )
SE_beta_0_hat = sigma * sqrt((1/n + mean(x)^2/Sxx))
SE_beta_1_hat = sigma / sqrt(Sxx)
results = data.frame(
Measure = c("True Expected Value", "Meam of Simulated", "True SD", "SD from Simulated"),
Beta_0_hat = c(-5, mean(beta_0_hats), SE_beta_0_hat, sd(beta_0_hats)),
beta_1_hat = c(3.25, mean(beta_1_hats), SE_beta_1_hat, sd(beta_1_hats))
)
knitr::kable(results)
hist(beta_0_hats, prob = TRUE, breaks = 20,
xlab = expression(hat(beta)[0]), main = "", border = "dodgerblue")
curve(dnorm(x, mean = beta_0, sd = SE_beta_0_hat),
col = "darkorange", add = TRUE, lwd = 3)
hist(beta_1_hats, prob = TRUE, breaks = 20,
xlab = expression(hat(beta)[1]), main = "", border = "dodgerblue")
curve(dnorm(x, mean = beta_1, sd = SE_beta_1_hat),
col = "darkorange", add = TRUE, lwd = 3)
hist(beta_0_hats, prob = TRUE, breaks = 20,
xlab = expression(hat(beta)[0]), main = "", border = "dodgerblue")
curve(dnorm(x, mean = beta_0, sd = SE_beta_0_hat),
col = "darkorange", add = TRUE, lwd = 3)
hist(beta_1_hats, prob = TRUE, breaks = 20,
xlab = expression(hat(beta)[1]), main = "", border = "grey")
curve(dnorm(x, mean = beta_1, sd = SE_beta_1_hat),
col = "yellow", add = TRUE, lwd = 3)
par(mfrow=c(1,2))
hist(beta_0_hats, prob = TRUE, breaks = 20,
xlab = expression(hat(beta)[0]), main = "", border = "dodgerblue")
curve(dnorm(x, mean = beta_0, sd = SE_beta_0_hat),
col = "darkorange", add = TRUE, lwd = 3)
hist(beta_1_hats, prob = TRUE, breaks = 20,
xlab = expression(hat(beta)[1]), main = "", border = "grey")
curve(dnorm(x, mean = beta_1, sd = SE_beta_1_hat),
col = "yellow", add = TRUE, lwd = 3)
cat_model$model
cat_model$model[,2]
calc_pred_int = function(model,newdata,level=0.95){
data = newdata
n = nrow(model$model)
Se = summary(model)$sigma
x = model$model[,2]
estimate = predict(model, newdata=data)
crit = qt((1-level)/2, df=n-2, lower.tail = FALSE)
Sxx = sum((x - mean(x))^2)
g = sqrt(1 + 1/n + (data$Bwt -mean(x))^2/Sxx)
lower = estimate - crit * Se * g
upper = estimate + crit * Se * g
v = c(estimate, lower, upper)
names(v) = c("estimate", "lower", "upper")
return(v)
}
install.packages("Amelia")
library(Amelia)
library(mlbench)
install.packages("mlbench")
library(mlbench)
data("Soybean")
View(Soybean)
?Soybean
missmap(Soybean, col=c("black", "grey"), legend=FALSE)
missmap(Soybean, col=c("black", "grey"), legend=TRUE)
str(Soybean)
data("BreastCancer")
str(BreastCancer)
par(mfrow=c(2,4))
for(i in 2:9) {
counts <- table(BreastCancer[,i])
name <- names(BreastCancer)[i]
barplot(counts, main=name)
}
install.packages("knitr")
install.packages("Rmarkdown")
yes
y
install.packages("rmarkdown")
setwd("C:/Users/sk392506/Documents/MCSDS/stat420/simulation/sim_proj")
