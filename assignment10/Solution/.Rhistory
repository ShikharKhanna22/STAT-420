border = "orange", col="grey")
curve( dchisq(x, df=2), col='black', add=TRUE, lwd=2)
hist(deviance_dist, prob=TRUE, xlab = "Likelihood ratio test statistic",
main = "Histogram of likelihood ratio test statistic",
border = "orange", col="grey")
curve( dchisq(x, df=2), col='black', add=TRUE, lwd=2)
c(mean(deviance_dist>5) , pchisq(5, df=2, lower.tail = FALSE))
sample_size = 10
set.seed(420)
x1 = rnorm(n = sample_size)
x2 = rnorm(n = sample_size)
x3 = rnorm(n = sample_size)
sim_logistic_data = function(sample_size = sample_size, beta_0, beta_1) {
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
data.frame(y,x1,x2,x3)
}
p_beta2 = rep(0,2500)
deviance_dist = rep(0,2500)
for (i in 1:2500){
dataset=sim_logistic_data(sample_size = sample_size, beta_0 = 0.4, beta_1 = -0.35)
sim_mod  = glm(y~.,  data=dataset, family = "binomial")
true_mod = glm(y~x1, data=dataset, family = "binomial")
p_beta2[i] = summary(sim_mod)$coefficients[3, 3]
deviance_dist[i] = anova(true_mod, sim_mod, test="LRT")$Deviance[2]
}
sample_size = 10
set.seed(420)
x1 = rnorm(n = sample_size)
x2 = rnorm(n = sample_size)
x3 = rnorm(n = sample_size)
sim_logistic_data = function(sample_size = sample_size, beta_0, beta_1) {
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
data.frame(y,x1,x2,x3)
}
p_beta2 = rep(0,2500)
deviance_dist = rep(0,2500)
for (i in 1:2500){
dataset=sim_logistic_data(sample_size = sample_size, beta_0 = 0.4, beta_1 = -0.35)
sim_mod  = glm(y~.,  data=dataset, family = "binomial")
true_mod = glm(y~x1, data=dataset, family = "binomial")
p_beta2[i] = summary(sim_mod)$coefficients[3, 3]
deviance_dist[i] = anova(true_mod, sim_mod, test="LRT")$Deviance[2]
}
hist(p_beta2, prob=TRUE, xlab = "Significance of beta2",
main = "Histogram of empirical values for the Wald test statistic",
border = "orange", col="grey")
curve(dnorm(x, mean=0, sd=1),
col="black", lwd=2, add=TRUE)
hist(p_beta2, prob=TRUE, xlab = "Significance of beta2",
main = "Histogram for the Wald test statistic",
border = "orange", col="grey")
curve(dnorm(x, mean=0, sd=1),
col="black", lwd=2, add=TRUE)
hist(p_beta2, prob=TRUE, xlab = "Significance of beta2",
main = "Histogram for the Wald test statistic",
border = "orange", col="grey")
curve(dnorm(x, mean=0, sd=1),
col="black", lwd=2, add=TRUE)
hist(deviance_dist, prob=TRUE, xlab = "Likelihood ratio test statistic",
main = "Histogram of likelihood ratio test statistic",
border = "orange", col="grey")
curve( dchisq(x, df=2), col='black', add=TRUE, lwd=2)
c(mean(p_beta2>1) , pnorm(1, mean=0, sd=1, lower.tail = FALSE))
c(mean(deviance_dist>5) , pchisq(5, df=2, lower.tail = FALSE))
install.packages("rpart")
install.packages("rpart.plot")
# install.packages("rpart")
# install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
data("ptitanic")
ptitanic = na.omit(ptitanic)
set.seed(42)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
titanic_mod = glm(survived~pclass+sex+age+age:sex, data= ptitanic_trn, family="binomial")
deviance(titanic_mod)
titanic_mod_null = glm(survived ~ sex+age+age:sex, data= ptitanic_trn, family="binomial")
anova(titanic_mod_null, titanic_mod, test="LRT")[["Deviance"]][2]
# install.packages("rpart")
# install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
data("ptitanic")
ptitanic = na.omit(ptitanic)
set.seed(42)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
titanic_mod = glm(survived~pclass+sex+age+age:sex, data= ptitanic_trn, family="binomial")
deviance(titanic_mod)
anova(titanic_mod_null, titanic_mod, test="LRT")[["Pr(>Chi)"]][2]
titanic_mod_null = glm(survived ~ pclass+sex+age, data= ptitanic_trn, family="binomial")
anova(titanic_mod_null, titanic_mod, test="LRT")[["Deviance"]][2]
anova(titanic_mod_null, titanic_mod, test="LRT")[["Pr(>Chi)"]][2]
titanic_mod_null = glm(survived ~ pclass+sex+age, data= ptitanic_trn, family="binomial")
anova(titanic_mod_null, titanic_mod, test="LRT")[["Deviance"]][2]
titanic_mod_null = glm(survived ~ pclass+sex+age, data= ptitanic_trn, family="binomial")
anova(titanic_mod_null, titanic_mod, test="LRT")[["Deviance"]][2]
anova(titanic_mod_null, titanic_mod, test="LRT")[["Pr(>Chi)"]][2]
# install.packages("rpart")
# install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
data("ptitanic")
# install.packages("rpart")
# install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
data("ptitanic")
ptitanic = na.omit(ptitanic)
set.seed(42)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
titanic_mod = glm(survived~pclass+sex+age+age:sex, data= ptitanic_trn, family="binomial")
deviance(titanic_mod)
titanic_mod_null = glm(survived ~ sex+age+age:sex, data= ptitanic_trn, family="binomial")
anova(titanic_mod_null, titanic_mod, test="LRT")[["Deviance"]][2]
anova(titanic_mod_null, titanic_mod, test="LRT")[["Pr(>Chi)"]][2]
titanic_mod_null = glm(survived ~ pclass+sex+age, data= ptitanic_trn, family="binomial")
anova(titanic_mod_null, titanic_mod, test="LRT")[["Deviance"]][2]
anova(titanic_mod_null, titanic_mod, test="LRT")[["Pr(>Chi)"]][2]
cutoffs = seq(0.01, 0.99, by = 0.01)
setwd("C:/Users/sk392506/Documents/MCSDS/stat420/assignment10/Solution")
wisc_train <- read.csv(file="wisc-train.csv")
wisc_test  <- read.csv(file="wisc-test.csv")
# is.factor(wisc_train$class)
# Partial Additive Model
mod1=glm(class ~ radius+smoothness+texture, data= wisc_train, family="binomial")
# Full Additivie Model
mod2=glm(class ~., data= wisc_train, family="binomial")
# AIC Selected model with two way interactions
mod3_start=glm(class~.^2, data= wisc_train, family="binomial")
mod3=step(mod3_start, trace=0, direction="backward")
c(boot::cv.glm(wisc_train, mod1, K = 5)$delta[1],
boot::cv.glm(wisc_train, mod2, K = 5)$delta[1],
boot::cv.glm(wisc_train, mod3, K = 5)$delta[1])
wisc_train <- read.csv(file="wisc-train.csv")
wisc_test  <- read.csv(file="wisc-test.csv")
# is.factor(wisc_train$class)
# Partial Additive Model
mod1=glm(class ~ radius+smoothness+texture, data= wisc_train, family="binomial")
# Full Additivie Model
mod2=glm(class ~., data= wisc_train, family="binomial")
# AIC Selected model with two way interactions
mod3_start=glm(class~.^2, data= wisc_train, family="binomial")
mod3=step(mod3_start, trace=0, direction="backward")
c(boot::cv.glm(wisc_train, mod1, K = 5)$delta[1],
boot::cv.glm(wisc_train, mod2, K = 5)$delta[1],
boot::cv.glm(wisc_train, mod3, K = 5)$delta[1])
wisc_train <- read.csv(file="wisc-train.csv")
wisc_test  <- read.csv(file="wisc-test.csv")
# is.factor(wisc_train$class)
# Partial Additive Model
mod1=glm(class ~ radius+smoothness+texture, data= wisc_train, family="binomial")
# Full Additivie Model
mod2=glm(class ~., data= wisc_train, family="binomial")
# AIC Selected model with two way interactions
mod3_start=glm(class~.^2, data= wisc_train, family="binomial")
mod3=step(mod3_start, trace=0, direction="backward")
set.seed(1)
c(boot::cv.glm(wisc_train, mod1, K = 5)$delta[1],
boot::cv.glm(wisc_train, mod2, K = 5)$delta[1],
boot::cv.glm(wisc_train, mod3, K = 5)$delta[1])
pred_test = predict(mod1, newdata = wisc_test, type="response")
pred_test_class = ifelse(pred_test >0.5, "M", "B")
1-mean(pred_test_class == wisc_test$class)
pred_test = predict(mod1, newdata = wisc_test, type="response")
pred_test_class = ifelse(pred_test >0.5, "M", "B")
mean(pred_test_class != wisc_test$class)
cutoffs = seq(0.01, 0.99, by = 0.01)
sensitivity_val=rep(0, length(cutoffs))
specificity_val=rep(0, length(cutoffs))
i=1
pred_test= predict(mod1, newdata = wisc_test, type="response")
for (cut in cutoffs){
pred_test_class = ifelse(predict_test>cut, "M", "B")
conf_mat_50 = make_conf_mat(predicted = pred_test_class, actual = wisc_test$class)
sensitivity_val[i]=get_sens(conf_mat_50)
specificity_val[i]=get_spec(conf_mat_50)
i=i+1
}
cutoffs = seq(0.01, 0.99, by = 0.01)
sensitivity_val=rep(0, length(cutoffs))
specificity_val=rep(0, length(cutoffs))
i=1
pred_test= predict(mod1, newdata = wisc_test, type="response")
for (cut in cutoffs){
pred_test_class = ifelse(pred_test>cut, "M", "B")
conf_mat_50 = make_conf_mat(predicted = pred_test_class, actual = wisc_test$class)
sensitivity_val[i]=get_sens(conf_mat_50)
specificity_val[i]=get_spec(conf_mat_50)
i=i+1
}
make_conf_mat = function(predicted, actual) {
table(predicted = predicted, actual = actual)
}
# function to get sensitivity
get_sens = function(conf_mat) {
conf_mat[2, 2] / sum(conf_mat[, 2])
}
# function to get specificity
get_spec =  function(conf_mat) {
conf_mat[1, 1] / sum(conf_mat[, 1])
}
cutoffs = seq(0.01, 0.99, by = 0.01)
sensitivity_val=rep(0, length(cutoffs))
specificity_val=rep(0, length(cutoffs))
i=1
pred_test= predict(mod1, newdata = wisc_test, type="response")
for (cut in cutoffs){
pred_test_class = ifelse(pred_test>cut, "M", "B")
conf_mat_50 = make_conf_mat(predicted = pred_test_class, actual = wisc_test$class)
sensitivity_val[i]=get_sens(conf_mat_50)
specificity_val[i]=get_spec(conf_mat_50)
i=i+1
}
plot(cutoffs, sensitivity_val, col="darkorange",
xlab="cutoff Values",
ylab="Sensitivity and Specificity",
main="cutoff values vs sensitivity and specificity",
pch=20, cex=5)
lines(cutoffs, specificity_val, col="dodgerblue", cex=5, pch=20)
legend("bottomright", c("Sensitivity", "Specificity"), lty = c(1, 1), lwd = 2,
col = c("darkorange", "dodgerblue"))
plot(cutoffs, sensitivity_val, col="darkorange",
xlab="cutoff Values",
ylab="Sensitivity and Specificity",
main="cutoff values vs sensitivity and specificity",
pch=20, cex=5, type="l", ylim=c(0.3, 1.0))
lines(cutoffs, specificity_val, col="dodgerblue", cex=5, pch=20)
legend("bottomright", c("Sensitivity", "Specificity"), lty = c(1, 1), lwd = 2,
col = c("darkorange", "dodgerblue"))
plot(cutoffs, sensitivity_val, col="grey",
xlab="cutoff Values",
ylab="Sensitivity and Specificity",
main="cutoff values vs sensitivity and specificity",
pch=20, cex=5, type="l", ylim=c(0.3, 1.0))
lines(cutoffs, specificity_val, col="orange", cex=5, pch=20)
legend("bottomright", c("Sensitivity", "Specificity"), lty = c(1, 1), lwd = 2,
col = c("grey", "orange"))
plot(cutoff_vals, sens_dist, col="grey",
xlab="cutoff thresholds",
ylab="Sensitivity and Specificity",
main="cutoff values vs sensitivity and specificity",
pch=20, cex=5, type="l", ylim=c(0.3, 1.0))
cutoff_vals  =  seq(0.01, 0.99, by = 0.01)
sens_dist = rep(0, length(cutoffs))
spec_dist = rep(0, length(cutoffs))
i=1
pred_test= predict(mod1, newdata = wisc_test, type="response")
for (cutoff in cutoff_vals){
pred_test_class = ifelse(pred_test>cutoff, "M", "B")
conf_mat_50 = make_conf_mat(predicted = pred_test_class, actual = wisc_test$class)
sens_dist[i] = get_sens(conf_mat_50)
spec_dist[i] = get_spec(conf_mat_50)
i=i+1
}
plot(cutoff_vals, sens_dist, col="grey",
xlab="cutoff thresholds",
ylab="Sensitivity and Specificity",
main="cutoff values vs sensitivity and specificity",
pch=20, cex=5, type="l", ylim=c(0.3, 1.0))
lines(cutoff_vals, spec_dist, col="orange", cex=5, pch=20)
legend("bottomright", c("Sensitivity", "Specificity"), lty = c(1, 1), lwd = 2,
col = c("grey", "orange"))
hist(p_beta2, prob=TRUE, xlab = "Significance of beta2",
main = "Histogram of empirical values for the Wald test statistic",
border = "orange", col="grey")
options(scipen = 1, digits = 4, width = 80, fig.align = "center")
sample_size = 150
set.seed(420)
x1 = rnorm(n = sample_size)
x2 = rnorm(n = sample_size)
x3 = rnorm(n = sample_size)
sim_logistic_data = function(sample_size = sample_size, beta_0, beta_1) {
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
data.frame(y,x1,x2,x3)
}
p_beta2 = rep(0,2500)
deviance_dist = rep(0,2500)
for (i in 1:2500){
dataset=sim_logistic_data(sample_size = sample_size, beta_0 = 0.4, beta_1 = -0.35)
sim_mod  = glm(y~.,  data=dataset, family = "binomial")
true_mod = glm(y~x1, data=dataset, family = "binomial")
p_beta2[i] = summary(sim_mod)$coefficients[3, 3]
deviance_dist[i] = anova(true_mod, sim_mod, test="LRT")$Deviance[2]
}
hist(p_beta2, prob=TRUE, xlab = "Significance of beta2",
main = "Histogram of empirical values for the Wald test statistic",
border = "orange", col="grey")
curve(dnorm(x, mean=0, sd=1),
col="darkorange", lwd=2, add=TRUE)
hist(p_beta2, prob=TRUE, xlab = "Significance of beta2",
main = "Histogram of empirical values for the Wald test statistic",
border = "blue", col="grey")
curve(dnorm(x, mean=0, sd=1),
col="darkorange", lwd=2, add=TRUE)
hist(p_beta2, prob=TRUE, xlab = "Significance of beta2",
main = "Histogram of empirical values for the Wald test statistic",
border = "lightblue", col="grey")
curve(dnorm(x, mean=0, sd=1),
col="darkorange", lwd=2, add=TRUE)
options(scipen = 1, digits = 4, width = 80, fig.align = "center")
sample_size = 150
set.seed(420)
x1 = rnorm(n = sample_size)
x2 = rnorm(n = sample_size)
x3 = rnorm(n = sample_size)
sim_logistic_data = function(sample_size = sample_size, beta_0, beta_1) {
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
data.frame(y,x1,x2,x3)
}
p_beta2 = rep(0,2500)
deviance_dist = rep(0,2500)
for (i in 1:2500){
sim_data = sim_logistic_data(sample_size = sample_size, beta_0 = 0.4, beta_1 = -0.35)
sim_mod  = glm(y~.,  data=sim_data, family = "binomial")
true_mod = glm(y~x1, data=sim_data, family = "binomial")
p_beta2[i] = summary(sim_mod)$coefficients[3, 3]
deviance_dist[i] = anova(true_mod, sim_mod, test="LRT")$Deviance[2]
}
hist(p_beta2, prob=TRUE, xlab = "Significance of beta2",
main = "Distribution of beta_2 for the Wald test",
border = "black", col="grey")
curve(dnorm(x, mean=0, sd=1),
col="darkorange", lwd=2, add=TRUE)
c(mean(p_beta2>1) , pnorm(1, mean=0, sd=1, lower.tail = FALSE))
hist(deviance_dist, prob=TRUE, xlab = "Likelihood ratio test statistic",
main = "Histogram of likelihood ratio test statistic",
border = "orange", col="grey")
curve( dchisq(x, df=2), col='black', add=TRUE, lwd=2)
hist(deviance_dist, prob=TRUE, xlab = "Likelihood ratio test statistic",
main = "Distribution of of likelihood ratio test statistic",
border = "black", col="grey")
curve(dchisq(x, df=2), col='orange', add=TRUE, lwd=2)
hist(deviance_dist, prob=TRUE, xlab = "Likelihood ratio test statistic",
main = "Distribution of of likelihood ratio test statistic",
border = "black", col="grey")
curve(dchisq(x, df=2), col='darkorange', add=TRUE, lwd=3)
sample_size = 10
set.seed(420)
x1 = rnorm(n = sample_size)
x2 = rnorm(n = sample_size)
x3 = rnorm(n = sample_size)
sim_logistic_data = function(sample_size = sample_size, beta_0, beta_1) {
eta = beta_0 + beta_1 * x1
p = 1 / (1 + exp(-eta))
y = rbinom(n = sample_size, size = 1, prob = p)
data.frame(y,x1,x2,x3)
}
p_beta2 = rep(0,2500)
deviance_dist = rep(0,2500)
for (i in 1:2500){
dataset=sim_logistic_data(sample_size = sample_size, beta_0 = 0.4, beta_1 = -0.35)
sim_mod  = glm(y~.,  data=dataset, family = "binomial")
true_mod = glm(y~x1, data=dataset, family = "binomial")
p_beta2[i] = summary(sim_mod)$coefficients[3, 3]
deviance_dist[i] = anova(true_mod, sim_mod, test="LRT")$Deviance[2]
}
hist(p_beta2, prob=TRUE, xlab = "Significance of beta2",
main = "Histogram for the Wald test statistic",
border = "orange", col="grey")
curve(dnorm(x, mean=0, sd=1),
col="black", lwd=2, add=TRUE)
hist(deviance_dist, prob=TRUE, xlab = "Likelihood ratio test statistic",
main = "Histogram of likelihood ratio test statistic",
border = "orange", col="grey")
curve( dchisq(x, df=2), col='black', add=TRUE, lwd=2)
hist(p_beta2, prob=TRUE, xlab = "Significance of beta2",
main = "Histogram for the Wald test statistic",
border = "black", col="grey")
curve(dnorm(x, mean=0, sd=1),
col="darkorange", lwd=3, add=TRUE)
hist(deviance_dist, prob=TRUE, xlab = "Likelihood ratio test statistic",
main = "Histogram of likelihood ratio test statistic",
border = "black", col="grey")
curve( dchisq(x, df=2), col='darkorange', add=TRUE, lwd=2)
# Probability of observing a test statistic larger than 1 for the Wald test statistic.
c(mean(p_beta2>1) , pnorm(1, mean=0, sd=1, lower.tail = FALSE))
# Probability of observing a test statistic larger than 5 for the likelihood ratio test statistic
c(mean(deviance_dist>5) , pchisq(5, df=2, lower.tail = FALSE))
# install.packages("rpart")
# install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
data("ptitanic")
ptitanic = na.omit(ptitanic)
set.seed(42)
trn_idx = sample(nrow(ptitanic), 300)
ptitanic_trn = ptitanic[trn_idx, ]
ptitanic_tst = ptitanic[-trn_idx, ]
titanic_mod = glm(survived~pclass+sex+age+age:sex, data= ptitanic_trn, family="binomial")
deviance(titanic_mod)
titanic_mod_null = glm(survived ~ sex+age+age:sex, data= ptitanic_trn, family="binomial")
anova(titanic_mod_null, titanic_mod, test="LRT")$Deviance[2]
anova(titanic_mod_null, titanic_mod, test="LRT")[["Pr(>Chi)"]][2]
titanic_mod_null = glm(survived ~ pclass+sex+age, data= ptitanic_trn, family="binomial")
anova(titanic_mod_null, titanic_mod, test="LRT")[["Deviance"]][2]
anova(titanic_mod_null, titanic_mod, test="LRT")[["Pr(>Chi)"]][2]
pred_test = predict(titanic_mod, newdata = ptitanic_tst, type="response")
pred_test_class = ifelse(predict_test>0.5, "survived", "died")
pred_test = predict(titanic_mod, newdata = ptitanic_tst, type="response")
pred_test_class = ifelse(pred_test > 0.5, "survived", "died")
mean(pred_test_class != ptitanic_tst$survived)
# function for matrix
make_conf_mat = function(predicted, actual) {
table(predicted = predicted, actual = actual)
}
# function to get sensitivity
get_sens = function(conf_mat) {
conf_mat[2, 2] / sum(conf_mat[, 2])
}
# function to get specificity
get_spec =  function(conf_mat) {
conf_mat[1, 1] / sum(conf_mat[, 1])
}
conf_mat_50 = make_conf_mat(predicted = pred_test_class, actual = ptitanic_tst$survived)
# Define all Functions
# function for matrix
make_conf_mat = function(predicted, actual) {
table(predicted = predicted, actual = actual)
}
# function to get sensitivity
get_sens = function(conf_mat) {
conf_mat[2, 2] / sum(conf_mat[, 2])
}
# function to get specificity
get_spec =  function(conf_mat) {
conf_mat[1, 1] / sum(conf_mat[, 1])
}
conf_mat_50 = make_conf_mat(predicted = pred_test_class, actual = ptitanic_tst$survived)
# sensitivity:
get_sens(conf_mat_50)
# specificity:
get_spec(conf_mat_50)
wisc_train <- read.csv(file="wisc-train.csv")
wisc_test  <- read.csv(file="wisc-test.csv")
is.factor(wisc_train$class)
# Partial Additive Model
mod1=glm(class ~ radius+smoothness+texture, data= wisc_train, family="binomial")
# Full Additivie Model
mod2=glm(class ~., data= wisc_train, family="binomial")
# AIC Selected model with two way interactions
mod3_start=glm(class~.^2, data= wisc_train, family="binomial")
mod3=step(mod3_start, trace=0, direction="backward")
set.seed(1)
c(boot::cv.glm(wisc_train, mod1, K = 5)$delta[1],
boot::cv.glm(wisc_train, mod2, K = 5)$delta[1],
boot::cv.glm(wisc_train, mod3, K = 5)$delta[1])
pred_test = predict(mod1, newdata = wisc_test, type="response")
pred_test_class = ifelse(pred_test >0.5, "M", "B")
mean(pred_test_class != wisc_test$class)
make_conf_mat = function(predicted, actual) {
table(predicted = predicted, actual = actual)
}
# function to get sensitivity
get_sens = function(conf_mat) {
conf_mat[2, 2] / sum(conf_mat[, 2])
}
# function to get specificity
get_spec =  function(conf_mat) {
conf_mat[1, 1] / sum(conf_mat[, 1])
}
make_conf_mat = function(predicted, actual) {
table(predicted = predicted, actual = actual)
}
# function to get sensitivity
get_sens = function(conf_mat) {
conf_mat[2, 2] / sum(conf_mat[, 2])
}
# function to get specificity
get_spec =  function(conf_mat) {
conf_mat[1, 1] / sum(conf_mat[, 1])
}
cutoff_vals  =  seq(0.01, 0.99, by = 0.01)
sens_dist = rep(0, length(cutoffs))
cutoff_vals  =  seq(0.01, 0.99, by = 0.01)
sens_dist = rep(0, length(cutoff_vals))
spec_dist = rep(0, length(cutoff_vals))
i=1
pred_test= predict(mod1, newdata = wisc_test, type="response")
for (cutoff in cutoff_vals){
pred_test_class = ifelse(pred_test>cutoff, "M", "B")
conf_mat_50 = make_conf_mat(predicted = pred_test_class, actual = wisc_test$class)
sens_dist[i] = get_sens(conf_mat_50)
spec_dist[i] = get_spec(conf_mat_50)
i=i+1
}
plot(cutoff_vals, sens_dist, col="grey",
xlab="cutoff thresholds",
ylab="Sensitivity and Specificity",
main="cutoff values vs sensitivity and specificity",
pch=20, cex=5, type="l", ylim=c(0.3, 1.0), lwd = 2)
lines(cutoff_vals, spec_dist, col="orange", cex=5, pch=20, lwd = 2)
legend("bottomright", c("Sensitivity", "Specificity"), lty = c(1, 1), lwd = 2,
col = c("grey", "orange"))
sens_dist - spec_dist
which.min(sens_dist - spec_dist)
which.min(abs(sens_dist - spec_dist))
cutoff_vals[which.min(abs(sens_dist - spec_dist))]
cutoff_vals[which.min(abs(sens_dist - spec_dist))]
